{"ast":null,"code":"var Point, _slope, math, normals, unit, util;\n\nPoint = require('./shapes').Point;\nutil = require('./util');\nmath = {};\n\nmath.toPoly = function (line) {\n  var i, index, len, n, point, polyLeft, polyRight;\n  polyLeft = [];\n  polyRight = [];\n  index = 0;\n\n  for (i = 0, len = line.length; i < len; i++) {\n    point = line[i];\n    n = normals(point, _slope(line, index));\n    polyLeft = polyLeft.concat([n[0]]);\n    polyRight = [n[1]].concat(polyRight);\n    index += 1;\n  }\n\n  return polyLeft.concat(polyRight);\n};\n\n_slope = function (line, index) {\n  var point;\n\n  if (line.length < 3) {\n    point = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  if (index === 0) {\n    point = _slope(line, index + 1);\n  } else if (index === line.length - 1) {\n    point = _slope(line, index - 1);\n  } else {\n    point = math.diff(line[index - 1], line[index + 1]);\n  }\n\n  return point;\n};\n\nmath.diff = function (a, b) {\n  return {\n    x: b.x - a.x,\n    y: b.y - a.y\n  };\n};\n\nunit = function (vector) {\n  var length;\n  length = math.len(vector);\n  return {\n    x: vector.x / length,\n    y: vector.y / length\n  };\n};\n\nnormals = function (p, slope) {\n  slope = unit(slope);\n  slope.x = slope.x * p.size / 2;\n  slope.y = slope.y * p.size / 2;\n  return [{\n    x: p.x - slope.y,\n    y: p.y + slope.x,\n    color: p.color\n  }, {\n    x: p.x + slope.y,\n    y: p.y - slope.x,\n    color: p.color\n  }];\n};\n\nmath.len = function (vector) {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n};\n\nmath.scalePositionScalar = function (val, viewportSize, oldScale, newScale) {\n  var newSize, oldSize;\n  oldSize = viewportSize * oldScale;\n  newSize = viewportSize * newScale;\n  return val + (oldSize - newSize) / 2;\n};\n\nmodule.exports = math;","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/math.js"],"names":["Point","_slope","math","normals","unit","util","require","toPoly","line","i","index","len","n","point","polyLeft","polyRight","length","concat","x","y","diff","a","b","vector","p","slope","size","color","Math","sqrt","pow","scalePositionScalar","val","viewportSize","oldScale","newScale","newSize","oldSize","module","exports"],"mappings":"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","sourcesContent":["var Point, _slope, math, normals, unit, util;\n\nPoint = require('./shapes').Point;\n\nutil = require('./util');\n\nmath = {};\n\nmath.toPoly = function(line) {\n  var i, index, len, n, point, polyLeft, polyRight;\n  polyLeft = [];\n  polyRight = [];\n  index = 0;\n  for (i = 0, len = line.length; i < len; i++) {\n    point = line[i];\n    n = normals(point, _slope(line, index));\n    polyLeft = polyLeft.concat([n[0]]);\n    polyRight = [n[1]].concat(polyRight);\n    index += 1;\n  }\n  return polyLeft.concat(polyRight);\n};\n\n_slope = function(line, index) {\n  var point;\n  if (line.length < 3) {\n    point = {\n      x: 0,\n      y: 0\n    };\n  }\n  if (index === 0) {\n    point = _slope(line, index + 1);\n  } else if (index === line.length - 1) {\n    point = _slope(line, index - 1);\n  } else {\n    point = math.diff(line[index - 1], line[index + 1]);\n  }\n  return point;\n};\n\nmath.diff = function(a, b) {\n  return {\n    x: b.x - a.x,\n    y: b.y - a.y\n  };\n};\n\nunit = function(vector) {\n  var length;\n  length = math.len(vector);\n  return {\n    x: vector.x / length,\n    y: vector.y / length\n  };\n};\n\nnormals = function(p, slope) {\n  slope = unit(slope);\n  slope.x = slope.x * p.size / 2;\n  slope.y = slope.y * p.size / 2;\n  return [\n    {\n      x: p.x - slope.y,\n      y: p.y + slope.x,\n      color: p.color\n    }, {\n      x: p.x + slope.y,\n      y: p.y - slope.x,\n      color: p.color\n    }\n  ];\n};\n\nmath.len = function(vector) {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n};\n\nmath.scalePositionScalar = function(val, viewportSize, oldScale, newScale) {\n  var newSize, oldSize;\n  oldSize = viewportSize * oldScale;\n  newSize = viewportSize * newScale;\n  return val + (oldSize - newSize) / 2;\n};\n\nmodule.exports = math;\n"]},"metadata":{},"sourceType":"script"}