{"ast":null,"code":"var TextRenderer, getLinesToRender, getNextLine, parseFontString;\n\nrequire('./fontmetrics.js');\n\nparseFontString = function (font) {\n  var fontFamily, fontItems, fontSize, item, j, len, maybeSize, remainingFontString;\n  fontItems = font.split(' ');\n  fontSize = 0;\n\n  for (j = 0, len = fontItems.length; j < len; j++) {\n    item = fontItems[j];\n    maybeSize = parseInt(item.replace(\"px\", \"\"), 10);\n\n    if (!isNaN(maybeSize)) {\n      fontSize = maybeSize;\n    }\n  }\n\n  if (!fontSize) {\n    throw \"Font size not found\";\n  }\n\n  remainingFontString = font.substring(fontItems[0].length + 1).replace('bold ', '').replace('italic ', '').replace('underline ', '');\n  fontFamily = remainingFontString;\n  return {\n    fontSize: fontSize,\n    fontFamily: fontFamily\n  };\n};\n\ngetNextLine = function (ctx, text, forcedWidth) {\n  var doesSubstringFit, endIndex, isEndOfString, isNonWord, isWhitespace, lastGoodIndex, lastOkayIndex, nextWordStartIndex, textToHere, wasInWord;\n\n  if (!text.length) {\n    return ['', ''];\n  }\n\n  endIndex = 0;\n  lastGoodIndex = 0;\n  lastOkayIndex = 0;\n  wasInWord = false;\n\n  while (true) {\n    endIndex += 1;\n    isEndOfString = endIndex >= text.length;\n    isWhitespace = !isEndOfString && text[endIndex].match(/\\s/);\n    isNonWord = isWhitespace || isEndOfString;\n    textToHere = text.substring(0, endIndex);\n    doesSubstringFit = forcedWidth ? ctx.measureTextWidth(textToHere).width <= forcedWidth : true;\n\n    if (doesSubstringFit) {\n      lastOkayIndex = endIndex;\n    }\n\n    if (isNonWord && wasInWord) {\n      wasInWord = false;\n\n      if (doesSubstringFit) {\n        lastGoodIndex = endIndex;\n      }\n    }\n\n    wasInWord = !isWhitespace;\n\n    if (isEndOfString || !doesSubstringFit) {\n      if (doesSubstringFit) {\n        return [text, ''];\n      } else if (lastGoodIndex > 0) {\n        nextWordStartIndex = lastGoodIndex + 1;\n\n        while (nextWordStartIndex < text.length && text[nextWordStartIndex].match('/\\s/')) {\n          nextWordStartIndex += 1;\n        }\n\n        return [text.substring(0, lastGoodIndex), text.substring(nextWordStartIndex)];\n      } else {\n        return [text.substring(0, lastOkayIndex), text.substring(lastOkayIndex)];\n      }\n    }\n  }\n};\n\ngetLinesToRender = function (ctx, text, forcedWidth) {\n  var j, len, lines, nextLine, ref, ref1, remainingText, textLine, textSplitOnLines;\n  textSplitOnLines = text.split(/\\r\\n|\\r|\\n/g);\n  lines = [];\n\n  for (j = 0, len = textSplitOnLines.length; j < len; j++) {\n    textLine = textSplitOnLines[j];\n    ref = getNextLine(ctx, textLine, forcedWidth), nextLine = ref[0], remainingText = ref[1];\n\n    if (nextLine) {\n      while (nextLine) {\n        lines.push(nextLine);\n        ref1 = getNextLine(ctx, remainingText, forcedWidth), nextLine = ref1[0], remainingText = ref1[1];\n      }\n    } else {\n      lines.push(textLine);\n    }\n  }\n\n  return lines;\n};\n\nTextRenderer = function () {\n  function TextRenderer(ctx, text1, font1, forcedWidth1, forcedHeight) {\n    var fontFamily, fontSize, ref;\n    this.text = text1;\n    this.font = font1;\n    this.forcedWidth = forcedWidth1;\n    this.forcedHeight = forcedHeight;\n    ref = parseFontString(this.font), fontFamily = ref.fontFamily, fontSize = ref.fontSize;\n    ctx.font = this.font;\n    ctx.textBaseline = 'baseline';\n    this.emDashWidth = ctx.measureTextWidth('â€”', fontSize, fontFamily).width;\n    this.caratWidth = ctx.measureTextWidth('|', fontSize, fontFamily).width;\n    this.lines = getLinesToRender(ctx, this.text, this.forcedWidth);\n    this.metricses = this.lines.map(function (_this) {\n      return function (line) {\n        return ctx.measureText2(line || 'X', fontSize, _this.font);\n      };\n    }(this));\n    this.metrics = {\n      ascent: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var ascent;\n        ascent = arg.ascent;\n        return ascent;\n      })),\n      descent: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var descent;\n        descent = arg.descent;\n        return descent;\n      })),\n      fontsize: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var fontsize;\n        fontsize = arg.fontsize;\n        return fontsize;\n      })),\n      leading: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var leading;\n        leading = arg.leading;\n        return leading;\n      })),\n      width: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var width;\n        width = arg.width;\n        return width;\n      })),\n      height: Math.max.apply(Math, this.metricses.map(function (arg) {\n        var height;\n        height = arg.height;\n        return height;\n      })),\n      bounds: {\n        minx: Math.min.apply(Math, this.metricses.map(function (arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.minx;\n        })),\n        miny: Math.min.apply(Math, this.metricses.map(function (arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.miny;\n        })),\n        maxx: Math.max.apply(Math, this.metricses.map(function (arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.maxx;\n        })),\n        maxy: Math.max.apply(Math, this.metricses.map(function (arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.maxy;\n        }))\n      }\n    };\n    this.boundingBoxWidth = Math.ceil(this.metrics.width);\n  }\n\n  TextRenderer.prototype.draw = function (ctx, x, y) {\n    var i, j, len, line, ref, results;\n    ctx.textBaseline = 'top';\n    ctx.font = this.font;\n    i = 0;\n    ref = this.lines;\n    results = [];\n\n    for (j = 0, len = ref.length; j < len; j++) {\n      line = ref[j];\n      ctx.fillText(line, x, y + i * this.metrics.leading);\n      results.push(i += 1);\n    }\n\n    return results;\n  };\n\n  TextRenderer.prototype.getWidth = function (isEditing) {\n    if (isEditing == null) {\n      isEditing = false;\n    }\n\n    if (this.forcedWidth) {\n      return this.forcedWidth;\n    } else {\n      if (isEditing) {\n        return this.metrics.bounds.maxx + this.caratWidth;\n      } else {\n        return this.metrics.bounds.maxx;\n      }\n    }\n  };\n\n  TextRenderer.prototype.getHeight = function () {\n    return this.forcedHeight || this.metrics.leading * this.lines.length;\n  };\n\n  return TextRenderer;\n}();\n\nmodule.exports = TextRenderer;","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/TextRenderer.js"],"names":["TextRenderer","getLinesToRender","getNextLine","parseFontString","require","font","fontFamily","fontItems","fontSize","item","j","len","maybeSize","remainingFontString","split","length","parseInt","replace","isNaN","substring","ctx","text","forcedWidth","doesSubstringFit","endIndex","isEndOfString","isNonWord","isWhitespace","lastGoodIndex","lastOkayIndex","nextWordStartIndex","textToHere","wasInWord","match","measureTextWidth","width","lines","nextLine","ref","ref1","remainingText","textLine","textSplitOnLines","push","text1","font1","forcedWidth1","forcedHeight","textBaseline","emDashWidth","caratWidth","metricses","map","_this","line","measureText2","metrics","ascent","Math","max","apply","arg","descent","fontsize","leading","height","bounds","minx","min","miny","maxx","maxy","boundingBoxWidth","ceil","prototype","draw","x","y","i","results","fillText","getWidth","isEditing","getHeight","module","exports"],"mappings":"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","sourcesContent":["var TextRenderer, getLinesToRender, getNextLine, parseFontString;\n\nrequire('./fontmetrics.js');\n\nparseFontString = function(font) {\n  var fontFamily, fontItems, fontSize, item, j, len, maybeSize, remainingFontString;\n  fontItems = font.split(' ');\n  fontSize = 0;\n  for (j = 0, len = fontItems.length; j < len; j++) {\n    item = fontItems[j];\n    maybeSize = parseInt(item.replace(\"px\", \"\"), 10);\n    if (!isNaN(maybeSize)) {\n      fontSize = maybeSize;\n    }\n  }\n  if (!fontSize) {\n    throw \"Font size not found\";\n  }\n  remainingFontString = font.substring(fontItems[0].length + 1).replace('bold ', '').replace('italic ', '').replace('underline ', '');\n  fontFamily = remainingFontString;\n  return {\n    fontSize: fontSize,\n    fontFamily: fontFamily\n  };\n};\n\ngetNextLine = function(ctx, text, forcedWidth) {\n  var doesSubstringFit, endIndex, isEndOfString, isNonWord, isWhitespace, lastGoodIndex, lastOkayIndex, nextWordStartIndex, textToHere, wasInWord;\n  if (!text.length) {\n    return ['', ''];\n  }\n  endIndex = 0;\n  lastGoodIndex = 0;\n  lastOkayIndex = 0;\n  wasInWord = false;\n  while (true) {\n    endIndex += 1;\n    isEndOfString = endIndex >= text.length;\n    isWhitespace = (!isEndOfString) && text[endIndex].match(/\\s/);\n    isNonWord = isWhitespace || isEndOfString;\n    textToHere = text.substring(0, endIndex);\n    doesSubstringFit = forcedWidth ? ctx.measureTextWidth(textToHere).width <= forcedWidth : true;\n    if (doesSubstringFit) {\n      lastOkayIndex = endIndex;\n    }\n    if (isNonWord && wasInWord) {\n      wasInWord = false;\n      if (doesSubstringFit) {\n        lastGoodIndex = endIndex;\n      }\n    }\n    wasInWord = !isWhitespace;\n    if (isEndOfString || !doesSubstringFit) {\n      if (doesSubstringFit) {\n        return [text, ''];\n      } else if (lastGoodIndex > 0) {\n        nextWordStartIndex = lastGoodIndex + 1;\n        while (nextWordStartIndex < text.length && text[nextWordStartIndex].match('/\\s/')) {\n          nextWordStartIndex += 1;\n        }\n        return [text.substring(0, lastGoodIndex), text.substring(nextWordStartIndex)];\n      } else {\n        return [text.substring(0, lastOkayIndex), text.substring(lastOkayIndex)];\n      }\n    }\n  }\n};\n\ngetLinesToRender = function(ctx, text, forcedWidth) {\n  var j, len, lines, nextLine, ref, ref1, remainingText, textLine, textSplitOnLines;\n  textSplitOnLines = text.split(/\\r\\n|\\r|\\n/g);\n  lines = [];\n  for (j = 0, len = textSplitOnLines.length; j < len; j++) {\n    textLine = textSplitOnLines[j];\n    ref = getNextLine(ctx, textLine, forcedWidth), nextLine = ref[0], remainingText = ref[1];\n    if (nextLine) {\n      while (nextLine) {\n        lines.push(nextLine);\n        ref1 = getNextLine(ctx, remainingText, forcedWidth), nextLine = ref1[0], remainingText = ref1[1];\n      }\n    } else {\n      lines.push(textLine);\n    }\n  }\n  return lines;\n};\n\nTextRenderer = (function() {\n  function TextRenderer(ctx, text1, font1, forcedWidth1, forcedHeight) {\n    var fontFamily, fontSize, ref;\n    this.text = text1;\n    this.font = font1;\n    this.forcedWidth = forcedWidth1;\n    this.forcedHeight = forcedHeight;\n    ref = parseFontString(this.font), fontFamily = ref.fontFamily, fontSize = ref.fontSize;\n    ctx.font = this.font;\n    ctx.textBaseline = 'baseline';\n    this.emDashWidth = ctx.measureTextWidth('â€”', fontSize, fontFamily).width;\n    this.caratWidth = ctx.measureTextWidth('|', fontSize, fontFamily).width;\n    this.lines = getLinesToRender(ctx, this.text, this.forcedWidth);\n    this.metricses = this.lines.map((function(_this) {\n      return function(line) {\n        return ctx.measureText2(line || 'X', fontSize, _this.font);\n      };\n    })(this));\n    this.metrics = {\n      ascent: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var ascent;\n        ascent = arg.ascent;\n        return ascent;\n      })),\n      descent: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var descent;\n        descent = arg.descent;\n        return descent;\n      })),\n      fontsize: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var fontsize;\n        fontsize = arg.fontsize;\n        return fontsize;\n      })),\n      leading: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var leading;\n        leading = arg.leading;\n        return leading;\n      })),\n      width: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var width;\n        width = arg.width;\n        return width;\n      })),\n      height: Math.max.apply(Math, this.metricses.map(function(arg) {\n        var height;\n        height = arg.height;\n        return height;\n      })),\n      bounds: {\n        minx: Math.min.apply(Math, this.metricses.map(function(arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.minx;\n        })),\n        miny: Math.min.apply(Math, this.metricses.map(function(arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.miny;\n        })),\n        maxx: Math.max.apply(Math, this.metricses.map(function(arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.maxx;\n        })),\n        maxy: Math.max.apply(Math, this.metricses.map(function(arg) {\n          var bounds;\n          bounds = arg.bounds;\n          return bounds.maxy;\n        }))\n      }\n    };\n    this.boundingBoxWidth = Math.ceil(this.metrics.width);\n  }\n\n  TextRenderer.prototype.draw = function(ctx, x, y) {\n    var i, j, len, line, ref, results;\n    ctx.textBaseline = 'top';\n    ctx.font = this.font;\n    i = 0;\n    ref = this.lines;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      line = ref[j];\n      ctx.fillText(line, x, y + i * this.metrics.leading);\n      results.push(i += 1);\n    }\n    return results;\n  };\n\n  TextRenderer.prototype.getWidth = function(isEditing) {\n    if (isEditing == null) {\n      isEditing = false;\n    }\n    if (this.forcedWidth) {\n      return this.forcedWidth;\n    } else {\n      if (isEditing) {\n        return this.metrics.bounds.maxx + this.caratWidth;\n      } else {\n        return this.metrics.bounds.maxx;\n      }\n    }\n  };\n\n  TextRenderer.prototype.getHeight = function() {\n    return this.forcedHeight || (this.metrics.leading * this.lines.length);\n  };\n\n  return TextRenderer;\n\n})();\n\nmodule.exports = TextRenderer;\n"]},"metadata":{},"sourceType":"script"}