{"ast":null,"code":"var defineSVGRenderer, lineEndCapShapes, renderShapeToSVG, renderers;\nlineEndCapShapes = require('./lineEndCapShapes');\nrenderers = {};\n\ndefineSVGRenderer = function (shapeName, shapeToSVGFunc) {\n  return renderers[shapeName] = shapeToSVGFunc;\n};\n\nrenderShapeToSVG = function (shape, opts) {\n  if (opts == null) {\n    opts = {};\n  }\n\n  if (opts.shouldIgnoreUnsupportedShapes == null) {\n    opts.shouldIgnoreUnsupportedShapes = false;\n  }\n\n  if (renderers[shape.className]) {\n    return renderers[shape.className](shape);\n  } else if (opts.shouldIgnoreUnsupportedShapes) {\n    console.warn(\"Can't render shape of type \" + shape.className + \" to SVG\");\n    return \"\";\n  } else {\n    throw \"Can't render shape of type \" + shape.className + \" to SVG\";\n  }\n};\n\ndefineSVGRenderer('Rectangle', function (shape) {\n  var height, width, x, x1, x2, y, y1, y2;\n  x1 = shape.x;\n  y1 = shape.y;\n  x2 = shape.x + shape.width;\n  y2 = shape.y + shape.height;\n  x = Math.min(x1, x2);\n  y = Math.min(y1, y2);\n  width = Math.max(x1, x2) - x;\n  height = Math.max(y1, y2) - y;\n\n  if (shape.strokeWidth % 2 !== 0) {\n    x += 0.5;\n    y += 0.5;\n  }\n\n  return \"<rect x='\" + x + \"' y='\" + y + \"' width='\" + width + \"' height='\" + height + \"' stroke='\" + shape.strokeColor + \"' fill='\" + shape.fillColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n});\ndefineSVGRenderer('SelectionBox', function (shape) {\n  return \"\";\n});\ndefineSVGRenderer('Ellipse', function (shape) {\n  var centerX, centerY, halfHeight, halfWidth;\n  halfWidth = Math.floor(shape.width / 2);\n  halfHeight = Math.floor(shape.height / 2);\n  centerX = shape.x + halfWidth;\n  centerY = shape.y + halfHeight;\n  return \"<ellipse cx='\" + centerX + \"' cy='\" + centerY + \"' rx='\" + Math.abs(halfWidth) + \"' ry='\" + Math.abs(halfHeight) + \"' stroke='\" + shape.strokeColor + \"' fill='\" + shape.fillColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n});\ndefineSVGRenderer('Image', function (shape) {\n  return \"<image x='\" + shape.x + \"' y='\" + shape.y + \"' width='\" + shape.image.naturalWidth * shape.scale + \"' height='\" + shape.image.naturalHeight * shape.scale + \"' xlink:href='\" + shape.image.src + \"' />\";\n});\ndefineSVGRenderer('Line', function (shape) {\n  var arrowWidth, capString, dashString, x1, x2, y1, y2;\n  dashString = shape.dash ? \"stroke-dasharray='\" + shape.dash.join(', ') + \"'\" : '';\n  capString = '';\n  arrowWidth = Math.max(shape.strokeWidth * 2.2, 5);\n  x1 = shape.x1;\n  x2 = shape.x2;\n  y1 = shape.y1;\n  y2 = shape.y2;\n\n  if (shape.strokeWidth % 2 !== 0) {\n    x1 += 0.5;\n    x2 += 0.5;\n    y1 += 0.5;\n    y2 += 0.5;\n  }\n\n  if (shape.endCapShapes[0]) {\n    capString += lineEndCapShapes[shape.endCapShapes[0]].svg(x1, y1, Math.atan2(y1 - y2, x1 - x2), arrowWidth, shape.color);\n  }\n\n  if (shape.endCapShapes[1]) {\n    capString += lineEndCapShapes[shape.endCapShapes[1]].svg(x2, y2, Math.atan2(y2 - y1, x2 - x1), arrowWidth, shape.color);\n  }\n\n  return \"<g> <line x1='\" + x1 + \"' y1='\" + y1 + \"' x2='\" + x2 + \"' y2='\" + y2 + \"' \" + dashString + \" stroke-linecap='\" + shape.capStyle + \"' stroke='\" + shape.color + \" 'stroke-width='\" + shape.strokeWidth + \"' /> \" + capString + \" </g>\";\n});\ndefineSVGRenderer('LinePath', function (shape) {\n  return \"<polyline fill='none' points='\" + shape.smoothedPoints.map(function (p) {\n    var offset;\n    offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n    return p.x + offset + \",\" + (p.y + offset);\n  }).join(' ') + \"' stroke='\" + shape.points[0].color + \"' stroke-linecap='round' stroke-width='\" + shape.points[0].size + \"' />\";\n});\ndefineSVGRenderer('ErasedLinePath', function (shape) {\n  return \"\";\n});\ndefineSVGRenderer('Polygon', function (shape) {\n  if (shape.isClosed) {\n    return \"<polygon fill='\" + shape.fillColor + \"' points='\" + shape.points.map(function (p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return p.x + offset + \",\" + (p.y + offset);\n    }).join(' ') + \"' stroke='\" + shape.strokeColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n  } else {\n    return \"<polyline fill='\" + shape.fillColor + \"' points='\" + shape.points.map(function (p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return p.x + offset + \",\" + (p.y + offset);\n    }).join(' ') + \"' stroke='none' /> <polyline fill='none' points='\" + shape.points.map(function (p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return p.x + offset + \",\" + (p.y + offset);\n    }).join(' ') + \"' stroke='\" + shape.strokeColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n  }\n});\ndefineSVGRenderer('Text', function (shape) {\n  var heightString, textSplitOnLines, widthString;\n  widthString = shape.forcedWidth ? \"width='\" + shape.forcedWidth + \"px'\" : \"\";\n  heightString = shape.forcedHeight ? \"height='\" + shape.forcedHeight + \"px'\" : \"\";\n  textSplitOnLines = shape.text.split(/\\r\\n|\\r|\\n/g);\n\n  if (shape.renderer) {\n    textSplitOnLines = shape.renderer.lines;\n  }\n\n  return \"<text x='\" + shape.x + \"' y='\" + shape.y + \"' \" + widthString + \" \" + heightString + \" fill='\" + shape.color + \"' style='font: \" + shape.font + \";'> \" + textSplitOnLines.map(function (_this) {\n    return function (line, i) {\n      var dy;\n      dy = i === 0 ? 0 : '1.2em';\n      return \"<tspan x='\" + shape.x + \"' dy='\" + dy + \"' alignment-baseline='text-before-edge'> \" + line + \" </tspan>\";\n    };\n  }(this)).join('') + \" </text>\";\n});\nmodule.exports = {\n  defineSVGRenderer: defineSVGRenderer,\n  renderShapeToSVG: renderShapeToSVG\n};","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/svgRenderer.js"],"names":["defineSVGRenderer","lineEndCapShapes","renderShapeToSVG","renderers","require","shapeName","shapeToSVGFunc","shape","opts","shouldIgnoreUnsupportedShapes","className","console","warn","height","width","x","x1","x2","y","y1","y2","Math","min","max","strokeWidth","strokeColor","fillColor","centerX","centerY","halfHeight","halfWidth","floor","abs","image","naturalWidth","scale","naturalHeight","src","arrowWidth","capString","dashString","dash","join","endCapShapes","svg","atan2","color","capStyle","smoothedPoints","map","p","offset","points","size","isClosed","heightString","textSplitOnLines","widthString","forcedWidth","forcedHeight","text","split","renderer","lines","font","_this","line","i","dy","module","exports"],"mappings":"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","sourcesContent":["var defineSVGRenderer, lineEndCapShapes, renderShapeToSVG, renderers;\n\nlineEndCapShapes = require('./lineEndCapShapes');\n\nrenderers = {};\n\ndefineSVGRenderer = function(shapeName, shapeToSVGFunc) {\n  return renderers[shapeName] = shapeToSVGFunc;\n};\n\nrenderShapeToSVG = function(shape, opts) {\n  if (opts == null) {\n    opts = {};\n  }\n  if (opts.shouldIgnoreUnsupportedShapes == null) {\n    opts.shouldIgnoreUnsupportedShapes = false;\n  }\n  if (renderers[shape.className]) {\n    return renderers[shape.className](shape);\n  } else if (opts.shouldIgnoreUnsupportedShapes) {\n    console.warn(\"Can't render shape of type \" + shape.className + \" to SVG\");\n    return \"\";\n  } else {\n    throw \"Can't render shape of type \" + shape.className + \" to SVG\";\n  }\n};\n\ndefineSVGRenderer('Rectangle', function(shape) {\n  var height, width, x, x1, x2, y, y1, y2;\n  x1 = shape.x;\n  y1 = shape.y;\n  x2 = shape.x + shape.width;\n  y2 = shape.y + shape.height;\n  x = Math.min(x1, x2);\n  y = Math.min(y1, y2);\n  width = Math.max(x1, x2) - x;\n  height = Math.max(y1, y2) - y;\n  if (shape.strokeWidth % 2 !== 0) {\n    x += 0.5;\n    y += 0.5;\n  }\n  return \"<rect x='\" + x + \"' y='\" + y + \"' width='\" + width + \"' height='\" + height + \"' stroke='\" + shape.strokeColor + \"' fill='\" + shape.fillColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n});\n\ndefineSVGRenderer('SelectionBox', function(shape) {\n  return \"\";\n});\n\ndefineSVGRenderer('Ellipse', function(shape) {\n  var centerX, centerY, halfHeight, halfWidth;\n  halfWidth = Math.floor(shape.width / 2);\n  halfHeight = Math.floor(shape.height / 2);\n  centerX = shape.x + halfWidth;\n  centerY = shape.y + halfHeight;\n  return \"<ellipse cx='\" + centerX + \"' cy='\" + centerY + \"' rx='\" + (Math.abs(halfWidth)) + \"' ry='\" + (Math.abs(halfHeight)) + \"' stroke='\" + shape.strokeColor + \"' fill='\" + shape.fillColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n});\n\ndefineSVGRenderer('Image', function(shape) {\n  return \"<image x='\" + shape.x + \"' y='\" + shape.y + \"' width='\" + (shape.image.naturalWidth * shape.scale) + \"' height='\" + (shape.image.naturalHeight * shape.scale) + \"' xlink:href='\" + shape.image.src + \"' />\";\n});\n\ndefineSVGRenderer('Line', function(shape) {\n  var arrowWidth, capString, dashString, x1, x2, y1, y2;\n  dashString = shape.dash ? \"stroke-dasharray='\" + (shape.dash.join(', ')) + \"'\" : '';\n  capString = '';\n  arrowWidth = Math.max(shape.strokeWidth * 2.2, 5);\n  x1 = shape.x1;\n  x2 = shape.x2;\n  y1 = shape.y1;\n  y2 = shape.y2;\n  if (shape.strokeWidth % 2 !== 0) {\n    x1 += 0.5;\n    x2 += 0.5;\n    y1 += 0.5;\n    y2 += 0.5;\n  }\n  if (shape.endCapShapes[0]) {\n    capString += lineEndCapShapes[shape.endCapShapes[0]].svg(x1, y1, Math.atan2(y1 - y2, x1 - x2), arrowWidth, shape.color);\n  }\n  if (shape.endCapShapes[1]) {\n    capString += lineEndCapShapes[shape.endCapShapes[1]].svg(x2, y2, Math.atan2(y2 - y1, x2 - x1), arrowWidth, shape.color);\n  }\n  return \"<g> <line x1='\" + x1 + \"' y1='\" + y1 + \"' x2='\" + x2 + \"' y2='\" + y2 + \"' \" + dashString + \" stroke-linecap='\" + shape.capStyle + \"' stroke='\" + shape.color + \" 'stroke-width='\" + shape.strokeWidth + \"' /> \" + capString + \" </g>\";\n});\n\ndefineSVGRenderer('LinePath', function(shape) {\n  return \"<polyline fill='none' points='\" + (shape.smoothedPoints.map(function(p) {\n    var offset;\n    offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n    return (p.x + offset) + \",\" + (p.y + offset);\n  }).join(' ')) + \"' stroke='\" + shape.points[0].color + \"' stroke-linecap='round' stroke-width='\" + shape.points[0].size + \"' />\";\n});\n\ndefineSVGRenderer('ErasedLinePath', function(shape) {\n  return \"\";\n});\n\ndefineSVGRenderer('Polygon', function(shape) {\n  if (shape.isClosed) {\n    return \"<polygon fill='\" + shape.fillColor + \"' points='\" + (shape.points.map(function(p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return (p.x + offset) + \",\" + (p.y + offset);\n    }).join(' ')) + \"' stroke='\" + shape.strokeColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n  } else {\n    return \"<polyline fill='\" + shape.fillColor + \"' points='\" + (shape.points.map(function(p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return (p.x + offset) + \",\" + (p.y + offset);\n    }).join(' ')) + \"' stroke='none' /> <polyline fill='none' points='\" + (shape.points.map(function(p) {\n      var offset;\n      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;\n      return (p.x + offset) + \",\" + (p.y + offset);\n    }).join(' ')) + \"' stroke='\" + shape.strokeColor + \"' stroke-width='\" + shape.strokeWidth + \"' />\";\n  }\n});\n\ndefineSVGRenderer('Text', function(shape) {\n  var heightString, textSplitOnLines, widthString;\n  widthString = shape.forcedWidth ? \"width='\" + shape.forcedWidth + \"px'\" : \"\";\n  heightString = shape.forcedHeight ? \"height='\" + shape.forcedHeight + \"px'\" : \"\";\n  textSplitOnLines = shape.text.split(/\\r\\n|\\r|\\n/g);\n  if (shape.renderer) {\n    textSplitOnLines = shape.renderer.lines;\n  }\n  return \"<text x='\" + shape.x + \"' y='\" + shape.y + \"' \" + widthString + \" \" + heightString + \" fill='\" + shape.color + \"' style='font: \" + shape.font + \";'> \" + (textSplitOnLines.map((function(_this) {\n    return function(line, i) {\n      var dy;\n      dy = i === 0 ? 0 : '1.2em';\n      return \"<tspan x='\" + shape.x + \"' dy='\" + dy + \"' alignment-baseline='text-before-edge'> \" + line + \" </tspan>\";\n    };\n  })(this)).join('')) + \" </text>\";\n});\n\nmodule.exports = {\n  defineSVGRenderer: defineSVGRenderer,\n  renderShapeToSVG: renderShapeToSVG\n};\n"]},"metadata":{},"sourceType":"script"}