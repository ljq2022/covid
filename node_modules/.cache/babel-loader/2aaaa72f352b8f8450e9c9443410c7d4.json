{"ast":null,"code":"module.exports = {\n  arrow: function () {\n    var getPoints;\n\n    getPoints = function (x, y, angle, width, length) {\n      return [{\n        x: x + Math.cos(angle + Math.PI / 2) * width / 2,\n        y: y + Math.sin(angle + Math.PI / 2) * width / 2\n      }, {\n        x: x + Math.cos(angle) * length,\n        y: y + Math.sin(angle) * length\n      }, {\n        x: x + Math.cos(angle - Math.PI / 2) * width / 2,\n        y: y + Math.sin(angle - Math.PI / 2) * width / 2\n      }];\n    };\n\n    return {\n      drawToCanvas: function (ctx, x, y, angle, width, color, length) {\n        var points;\n\n        if (length == null) {\n          length = 0;\n        }\n\n        length = length || width;\n        ctx.fillStyle = color;\n        ctx.lineWidth = 0;\n        ctx.strokeStyle = 'transparent';\n        ctx.beginPath();\n        points = getPoints(x, y, angle, width, length);\n        ctx.moveTo(points[0].x, points[0].y);\n        ctx.lineTo(points[1].x, points[1].y);\n        ctx.lineTo(points[2].x, points[2].y);\n        return ctx.fill();\n      },\n      svg: function (x, y, angle, width, color, length) {\n        var points;\n\n        if (length == null) {\n          length = 0;\n        }\n\n        length = length || width;\n        points = getPoints(x, y, angle, width, length);\n        return \"<polygon fill='\" + color + \"' stroke='none' points='\" + points.map(function (p) {\n          return p.x + \",\" + p.y;\n        }) + \"' />\";\n      }\n    };\n  }()\n};","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/lineEndCapShapes.js"],"names":["module","exports","arrow","getPoints","x","y","angle","width","length","Math","cos","PI","sin","drawToCanvas","ctx","color","points","fillStyle","lineWidth","strokeStyle","beginPath","moveTo","lineTo","fill","svg","map","p"],"mappings":"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","sourcesContent":["module.exports = {\n  arrow: (function() {\n    var getPoints;\n    getPoints = function(x, y, angle, width, length) {\n      return [\n        {\n          x: x + Math.cos(angle + Math.PI / 2) * width / 2,\n          y: y + Math.sin(angle + Math.PI / 2) * width / 2\n        }, {\n          x: x + Math.cos(angle) * length,\n          y: y + Math.sin(angle) * length\n        }, {\n          x: x + Math.cos(angle - Math.PI / 2) * width / 2,\n          y: y + Math.sin(angle - Math.PI / 2) * width / 2\n        }\n      ];\n    };\n    return {\n      drawToCanvas: function(ctx, x, y, angle, width, color, length) {\n        var points;\n        if (length == null) {\n          length = 0;\n        }\n        length = length || width;\n        ctx.fillStyle = color;\n        ctx.lineWidth = 0;\n        ctx.strokeStyle = 'transparent';\n        ctx.beginPath();\n        points = getPoints(x, y, angle, width, length);\n        ctx.moveTo(points[0].x, points[0].y);\n        ctx.lineTo(points[1].x, points[1].y);\n        ctx.lineTo(points[2].x, points[2].y);\n        return ctx.fill();\n      },\n      svg: function(x, y, angle, width, color, length) {\n        var points;\n        if (length == null) {\n          length = 0;\n        }\n        length = length || width;\n        points = getPoints(x, y, angle, width, length);\n        return \"<polygon fill='\" + color + \"' stroke='none' points='\" + (points.map(function(p) {\n          return p.x + \",\" + p.y;\n        })) + \"' />\";\n      }\n    };\n  })()\n};\n"]},"metadata":{},"sourceType":"script"}