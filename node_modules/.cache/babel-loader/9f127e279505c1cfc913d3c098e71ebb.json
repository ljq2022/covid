{"ast":null,"code":"\"use strict\";\n/**\n  This library rewrites the Canvas2D \"measureText\" function\n  so that it returns a more complete metrics object.\n  This library is licensed under the MIT (Expat) license,\n  the text for which is included below.\n\n** -----------------------------------------------------------------------------\n\n  CHANGELOG:\n\n    2012-01-21 - Whitespace handling added by Joe Turner\n                 (https://github.com/oampo)\n\n    2015-06-08 - Various hacks added by Steve Johnson\n\n** -----------------------------------------------------------------------------\n\n  Copyright (C) 2011 by Mike \"Pomax\" Kamermans\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n**/\n\n(function () {\n  var NAME = \"FontMetrics Library\";\n  var VERSION = \"1-2012.0121.1300\"; // if there is no getComputedStyle, this library won't work.\n\n  if (!document.defaultView.getComputedStyle) {\n    throw \"ERROR: 'document.defaultView.getComputedStyle' not found. This library only works in browsers that can report computed CSS values.\";\n  } // store the old text metrics function on the Canvas2D prototype\n\n\n  CanvasRenderingContext2D.prototype.measureTextWidth = CanvasRenderingContext2D.prototype.measureText;\n  /**\n   *  shortcut function for getting computed CSS values\n   */\n\n  var getCSSValue = function getCSSValue(element, property) {\n    return document.defaultView.getComputedStyle(element, null).getPropertyValue(property);\n  }; // debug function\n\n\n  var show = function show(canvas, ctx, xstart, w, h, metrics) {\n    document.body.appendChild(canvas);\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n    ctx.beginPath();\n    ctx.moveTo(xstart, 0);\n    ctx.lineTo(xstart, h);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(xstart + metrics.bounds.maxx, 0);\n    ctx.lineTo(xstart + metrics.bounds.maxx, h);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, h / 2 - metrics.ascent);\n    ctx.lineTo(w, h / 2 - metrics.ascent);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, h / 2 + metrics.descent);\n    ctx.lineTo(w, h / 2 + metrics.descent);\n    ctx.closePath();\n    ctx.stroke();\n  };\n  /**\n   * The new text metrics function\n   */\n\n\n  CanvasRenderingContext2D.prototype.measureText2 = function (textstring, fontSize, fontString) {\n    var metrics = this.measureTextWidth(textstring),\n        isSpace = !/\\S/.test(textstring);\n    metrics.fontsize = fontSize; // for text lead values, we meaure a multiline text container.\n\n    var leadDiv = document.createElement(\"div\");\n    leadDiv.style.position = \"absolute\";\n    leadDiv.style.opacity = 0;\n    leadDiv.style.font = fontString;\n    leadDiv.innerHTML = textstring + \"<br/>\" + textstring;\n    document.body.appendChild(leadDiv); // make some initial guess at the text leading (using the standard TeX ratio)\n\n    metrics.leading = 1.2 * fontSize; // then we try to get the real value from the browser\n\n    var leadDivHeight = getCSSValue(leadDiv, \"height\");\n    leadDivHeight = leadDivHeight.replace(\"px\", \"\");\n\n    if (leadDivHeight >= fontSize * 2) {\n      metrics.leading = leadDivHeight / 2 | 0;\n    }\n\n    document.body.removeChild(leadDiv); // if we're not dealing with white space, we can compute metrics\n\n    if (!isSpace) {\n      // Have characters, so measure the text\n      var canvas = document.createElement(\"canvas\");\n      var padding = 100;\n      canvas.width = metrics.width + padding;\n      canvas.height = 3 * fontSize;\n      canvas.style.opacity = 1;\n      canvas.style.font = fontString;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.font = fontString;\n      var w = canvas.width,\n          h = canvas.height,\n          baseline = h / 2; // Set all canvas pixeldata values to 255, with all the content\n      // data being 0. This lets us scan for data[i] != 255.\n\n      ctx.fillStyle = \"white\";\n      ctx.fillRect(-1, -1, w + 2, h + 2);\n      ctx.fillStyle = \"black\";\n      ctx.fillText(textstring, padding / 2, baseline);\n      var pixelData = ctx.getImageData(0, 0, w, h).data; // canvas pixel data is w*4 by h*4, because R, G, B and A are separate,\n      // consecutive values in the array, rather than stored as 32 bit ints.\n\n      var i = 0,\n          w4 = w * 4,\n          len = pixelData.length; // Finding the ascent uses a normal, forward scanline\n\n      while (++i < len && pixelData[i] === 255) {}\n\n      var ascent = i / w4 | 0; // Finding the descent uses a reverse scanline\n\n      i = len - 1;\n\n      while (--i > 0 && pixelData[i] === 255) {}\n\n      var descent = i / w4 | 0; // find the min-x coordinate\n\n      for (i = 0; i < len && pixelData[i] === 255;) {\n        i += w4;\n\n        if (i >= len) {\n          i = i - len + 4;\n        }\n      }\n\n      var minx = i % w4 / 4 | 0; // find the max-x coordinate\n\n      var step = 1;\n\n      for (i = len - 3; i >= 0 && pixelData[i] === 255;) {\n        i -= w4;\n\n        if (i < 0) {\n          i = len - 3 - step++ * 4;\n        }\n      }\n\n      var maxx = i % w4 / 4 + 1 | 0; // set font metrics\n\n      metrics.ascent = baseline - ascent;\n      metrics.descent = descent - baseline;\n      metrics.bounds = {\n        minx: minx - padding / 2,\n        maxx: maxx - padding / 2,\n        miny: 0,\n        maxy: descent - ascent\n      };\n      metrics.height = 1 + (descent - ascent);\n    } // if we ARE dealing with whitespace, most values will just be zero.\n    else {\n        // Only whitespace, so we can't measure the text\n        metrics.ascent = 0;\n        metrics.descent = 0;\n        metrics.bounds = {\n          minx: 0,\n          maxx: metrics.width,\n          // Best guess\n          miny: 0,\n          maxy: 0\n        };\n        metrics.height = 0;\n      }\n\n    return metrics;\n  };\n})();","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/fontmetrics.js"],"names":["NAME","VERSION","document","defaultView","getComputedStyle","CanvasRenderingContext2D","prototype","measureTextWidth","measureText","getCSSValue","element","property","getPropertyValue","show","canvas","ctx","xstart","w","h","metrics","body","appendChild","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","bounds","maxx","ascent","descent","measureText2","textstring","fontSize","fontString","isSpace","test","fontsize","leadDiv","createElement","style","position","opacity","font","innerHTML","leading","leadDivHeight","replace","removeChild","padding","width","height","getContext","baseline","fillStyle","fillRect","fillText","pixelData","getImageData","data","i","w4","len","length","minx","step","miny","maxy"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n  This library rewrites the Canvas2D \"measureText\" function\n  so that it returns a more complete metrics object.\n  This library is licensed under the MIT (Expat) license,\n  the text for which is included below.\n\n** -----------------------------------------------------------------------------\n\n  CHANGELOG:\n\n    2012-01-21 - Whitespace handling added by Joe Turner\n                 (https://github.com/oampo)\n\n    2015-06-08 - Various hacks added by Steve Johnson\n\n** -----------------------------------------------------------------------------\n\n  Copyright (C) 2011 by Mike \"Pomax\" Kamermans\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n**/\n(function () {\n  var NAME = \"FontMetrics Library\";\n  var VERSION = \"1-2012.0121.1300\";\n\n  // if there is no getComputedStyle, this library won't work.\n  if (!document.defaultView.getComputedStyle) {\n    throw \"ERROR: 'document.defaultView.getComputedStyle' not found. This library only works in browsers that can report computed CSS values.\";\n  }\n\n  // store the old text metrics function on the Canvas2D prototype\n  CanvasRenderingContext2D.prototype.measureTextWidth = CanvasRenderingContext2D.prototype.measureText;\n\n  /**\n   *  shortcut function for getting computed CSS values\n   */\n  var getCSSValue = function getCSSValue(element, property) {\n    return document.defaultView.getComputedStyle(element, null).getPropertyValue(property);\n  };\n\n  // debug function\n  var show = function show(canvas, ctx, xstart, w, h, metrics) {\n    document.body.appendChild(canvas);\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n\n    ctx.beginPath();\n    ctx.moveTo(xstart, 0);\n    ctx.lineTo(xstart, h);\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(xstart + metrics.bounds.maxx, 0);\n    ctx.lineTo(xstart + metrics.bounds.maxx, h);\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(0, h / 2 - metrics.ascent);\n    ctx.lineTo(w, h / 2 - metrics.ascent);\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(0, h / 2 + metrics.descent);\n    ctx.lineTo(w, h / 2 + metrics.descent);\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n  /**\n   * The new text metrics function\n   */\n  CanvasRenderingContext2D.prototype.measureText2 = function (textstring, fontSize, fontString) {\n    var metrics = this.measureTextWidth(textstring),\n        isSpace = !/\\S/.test(textstring);\n    metrics.fontsize = fontSize;\n\n    // for text lead values, we meaure a multiline text container.\n    var leadDiv = document.createElement(\"div\");\n    leadDiv.style.position = \"absolute\";\n    leadDiv.style.opacity = 0;\n    leadDiv.style.font = fontString;\n    leadDiv.innerHTML = textstring + \"<br/>\" + textstring;\n    document.body.appendChild(leadDiv);\n\n    // make some initial guess at the text leading (using the standard TeX ratio)\n    metrics.leading = 1.2 * fontSize;\n\n    // then we try to get the real value from the browser\n    var leadDivHeight = getCSSValue(leadDiv, \"height\");\n    leadDivHeight = leadDivHeight.replace(\"px\", \"\");\n    if (leadDivHeight >= fontSize * 2) {\n      metrics.leading = leadDivHeight / 2 | 0;\n    }\n    document.body.removeChild(leadDiv);\n\n    // if we're not dealing with white space, we can compute metrics\n    if (!isSpace) {\n      // Have characters, so measure the text\n      var canvas = document.createElement(\"canvas\");\n      var padding = 100;\n      canvas.width = metrics.width + padding;\n      canvas.height = 3 * fontSize;\n      canvas.style.opacity = 1;\n      canvas.style.font = fontString;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.font = fontString;\n\n      var w = canvas.width,\n          h = canvas.height,\n          baseline = h / 2;\n\n      // Set all canvas pixeldata values to 255, with all the content\n      // data being 0. This lets us scan for data[i] != 255.\n      ctx.fillStyle = \"white\";\n      ctx.fillRect(-1, -1, w + 2, h + 2);\n      ctx.fillStyle = \"black\";\n      ctx.fillText(textstring, padding / 2, baseline);\n      var pixelData = ctx.getImageData(0, 0, w, h).data;\n\n      // canvas pixel data is w*4 by h*4, because R, G, B and A are separate,\n      // consecutive values in the array, rather than stored as 32 bit ints.\n      var i = 0,\n          w4 = w * 4,\n          len = pixelData.length;\n\n      // Finding the ascent uses a normal, forward scanline\n      while (++i < len && pixelData[i] === 255) {}\n      var ascent = i / w4 | 0;\n\n      // Finding the descent uses a reverse scanline\n      i = len - 1;\n      while (--i > 0 && pixelData[i] === 255) {}\n      var descent = i / w4 | 0;\n\n      // find the min-x coordinate\n      for (i = 0; i < len && pixelData[i] === 255;) {\n        i += w4;\n        if (i >= len) {\n          i = i - len + 4;\n        }\n      }\n      var minx = i % w4 / 4 | 0;\n\n      // find the max-x coordinate\n      var step = 1;\n      for (i = len - 3; i >= 0 && pixelData[i] === 255;) {\n        i -= w4;\n        if (i < 0) {\n          i = len - 3 - step++ * 4;\n        }\n      }\n      var maxx = i % w4 / 4 + 1 | 0;\n\n      // set font metrics\n      metrics.ascent = baseline - ascent;\n      metrics.descent = descent - baseline;\n      metrics.bounds = { minx: minx - padding / 2,\n        maxx: maxx - padding / 2,\n        miny: 0,\n        maxy: descent - ascent };\n      metrics.height = 1 + (descent - ascent);\n    }\n\n    // if we ARE dealing with whitespace, most values will just be zero.\n    else {\n        // Only whitespace, so we can't measure the text\n        metrics.ascent = 0;\n        metrics.descent = 0;\n        metrics.bounds = { minx: 0,\n          maxx: metrics.width, // Best guess\n          miny: 0,\n          maxy: 0 };\n        metrics.height = 0;\n      }\n    return metrics;\n  };\n})();"]},"metadata":{},"sourceType":"script"}