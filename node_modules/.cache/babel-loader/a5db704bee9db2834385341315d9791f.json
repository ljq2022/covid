{"ast":null,"code":"var ALL_FONTS, FONT_NAME_TO_VALUE, MONOSPACE_FONTS, OTHER_FONTS, React, SANS_SERIF_FONTS, SERIF_FONTS, _, defineOptionsStyle, i, j, l, len, len1, len2, len3, m, name, ref, ref1, ref2, ref3, value;\n\nReact = require('../reactGUI/React-shim');\ndefineOptionsStyle = require('./optionsStyles').defineOptionsStyle;\n_ = require('../core/localization')._;\nSANS_SERIF_FONTS = [['Arial', 'Arial,\"Helvetica Neue\",Helvetica,sans-serif'], ['Arial Black', '\"Arial Black\",\"Arial Bold\",Gadget,sans-serif'], ['Arial Narrow', '\"Arial Narrow\",Arial,sans-serif'], ['Gill Sans', '\"Gill Sans\",\"Gill Sans MT\",Calibri,sans-serif'], ['Helvetica', '\"Helvetica Neue\",Helvetica,Arial,sans-serif'], ['Impact', 'Impact,Haettenschweiler,\"Franklin Gothic Bold\",Charcoal,\"Helvetica Inserat\",\"Bitstream Vera Sans Bold\",\"Arial Black\",sans-serif'], ['Tahoma', 'Tahoma,Verdana,Segoe,sans-serif'], ['Trebuchet MS', '\"Trebuchet MS\",\"Lucida Grande\",\"Lucida Sans Unicode\",\"Lucida Sans\",Tahoma,sans-serif'], ['Verdana', 'Verdana,Geneva,sans-serif']].map(function (arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\nSERIF_FONTS = [['Baskerville', 'Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",Garamond,\"Times New Roman\",serif'], ['Garamond', 'Garamond,Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",\"Times New Roman\",serif'], ['Georgia', 'Georgia,Times,\"Times New Roman\",serif'], ['Hoefler Text', '\"Hoefler Text\",\"Baskerville Old Face\",Garamond,\"Times New Roman\",serif'], ['Lucida Bright', '\"Lucida Bright\",Georgia,serif'], ['Palatino', 'Palatino,\"Palatino Linotype\",\"Palatino LT STD\",\"Book Antiqua\",Georgia,serif'], ['Times New Roman', 'TimesNewRoman,\"Times New Roman\",Times,Baskerville,Georgia,serif']].map(function (arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\nMONOSPACE_FONTS = [['Consolas/Monaco', 'Consolas,monaco,\"Lucida Console\",monospace'], ['Courier New', '\"Courier New\",Courier,\"Lucida Sans Typewriter\",\"Lucida Typewriter\",monospace'], ['Lucida Sans Typewriter', '\"Lucida Sans Typewriter\",\"Lucida Console\",monaco,\"Bitstream Vera Sans Mono\",monospace']].map(function (arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\nOTHER_FONTS = [['Copperplate', 'Copperplate,\"Copperplate Gothic Light\",fantasy'], ['Papyrus', 'Papyrus,fantasy'], ['Script', '\"Brush Script MT\",cursive']].map(function (arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\nALL_FONTS = [[_('Sans Serif'), SANS_SERIF_FONTS], [_('Serif'), SERIF_FONTS], [_('Monospace'), MONOSPACE_FONTS], [_('Other'), OTHER_FONTS]];\nFONT_NAME_TO_VALUE = {};\n\nfor (i = 0, len = SANS_SERIF_FONTS.length; i < len; i++) {\n  ref = SANS_SERIF_FONTS[i], name = ref.name, value = ref.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (j = 0, len1 = SERIF_FONTS.length; j < len1; j++) {\n  ref1 = SERIF_FONTS[j], name = ref1.name, value = ref1.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (l = 0, len2 = MONOSPACE_FONTS.length; l < len2; l++) {\n  ref2 = MONOSPACE_FONTS[l], name = ref2.name, value = ref2.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (m = 0, len3 = OTHER_FONTS.length; m < len3; m++) {\n  ref3 = OTHER_FONTS[m], name = ref3.name, value = ref3.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\ndefineOptionsStyle('font', React.createClass({\n  displayName: 'FontOptions',\n  getInitialState: function () {\n    return {\n      isItalic: false,\n      isBold: false,\n      fontName: 'Helvetica',\n      fontSizeIndex: 4\n    };\n  },\n  getFontSizes: function () {\n    return [9, 10, 12, 14, 18, 24, 36, 48, 64, 72, 96, 144, 288];\n  },\n  updateTool: function (newState) {\n    var fontSize, items, k;\n\n    if (newState == null) {\n      newState = {};\n    }\n\n    for (k in this.state) {\n      if (!(k in newState)) {\n        newState[k] = this.state[k];\n      }\n    }\n\n    fontSize = this.getFontSizes()[newState.fontSizeIndex];\n    items = [];\n\n    if (newState.isItalic) {\n      items.push('italic');\n    }\n\n    if (newState.isBold) {\n      items.push('bold');\n    }\n\n    items.push(fontSize + \"px\");\n    items.push(FONT_NAME_TO_VALUE[newState.fontName]);\n    this.props.lc.tool.font = items.join(' ');\n    return this.props.lc.trigger('setFont', items.join(' '));\n  },\n  handleFontSize: function (event) {\n    var newState;\n    newState = {\n      fontSizeIndex: event.target.value\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleFontFamily: function (event) {\n    var newState;\n    newState = {\n      fontName: event.target.selectedOptions[0].innerHTML\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleItalic: function (event) {\n    var newState;\n    newState = {\n      isItalic: !this.state.isItalic\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleBold: function (event) {\n    var newState;\n    newState = {\n      isBold: !this.state.isBold\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  componentDidMount: function () {\n    return this.updateTool();\n  },\n  render: function () {\n    var br, div, input, label, lc, optgroup, option, ref4, select, span;\n    lc = this.props.lc;\n    ref4 = React.DOM, div = ref4.div, input = ref4.input, select = ref4.select, option = ref4.option, br = ref4.br, label = ref4.label, span = ref4.span, optgroup = ref4.optgroup;\n    return div({\n      className: 'lc-font-settings'\n    }, select({\n      value: this.state.fontSizeIndex,\n      onChange: this.handleFontSize\n    }, this.getFontSizes().map(function (_this) {\n      return function (size, ix) {\n        return option({\n          value: ix,\n          key: ix\n        }, size + \"px\");\n      };\n    }(this))), select({\n      value: this.state.fontName,\n      onChange: this.handleFontFamily\n    }, ALL_FONTS.map(function (_this) {\n      return function (arg) {\n        var fonts, label;\n        label = arg[0], fonts = arg[1];\n        return optgroup({\n          key: label,\n          label: label\n        }, fonts.map(function (family, ix) {\n          return option({\n            value: family.name,\n            key: ix\n          }, family.name);\n        }));\n      };\n    }(this))), span({}, label({\n      htmlFor: 'italic'\n    }, _(\"italic\")), input({\n      type: 'checkbox',\n      id: 'italic',\n      checked: this.state.isItalic,\n      onChange: this.handleItalic\n    })), span({}, label({\n      htmlFor: 'bold'\n    }, _(\"bold\")), input({\n      type: 'checkbox',\n      id: 'bold',\n      checked: this.state.isBold,\n      onChange: this.handleBold\n    })));\n  }\n}));\nmodule.exports = {};","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/optionsStyles/font.js"],"names":["ALL_FONTS","FONT_NAME_TO_VALUE","MONOSPACE_FONTS","OTHER_FONTS","React","SANS_SERIF_FONTS","SERIF_FONTS","_","defineOptionsStyle","i","j","l","len","len1","len2","len3","m","name","ref","ref1","ref2","ref3","value","require","map","arg","length","createClass","displayName","getInitialState","isItalic","isBold","fontName","fontSizeIndex","getFontSizes","updateTool","newState","fontSize","items","k","state","push","props","lc","tool","font","join","trigger","handleFontSize","event","target","setState","handleFontFamily","selectedOptions","innerHTML","handleItalic","handleBold","componentDidMount","render","br","div","input","label","optgroup","option","ref4","select","span","DOM","className","onChange","_this","size","ix","key","fonts","family","htmlFor","type","id","checked","module","exports"],"mappings":"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","sourcesContent":["var ALL_FONTS, FONT_NAME_TO_VALUE, MONOSPACE_FONTS, OTHER_FONTS, React, SANS_SERIF_FONTS, SERIF_FONTS, _, defineOptionsStyle, i, j, l, len, len1, len2, len3, m, name, ref, ref1, ref2, ref3, value;\n\nReact = require('../reactGUI/React-shim');\n\ndefineOptionsStyle = require('./optionsStyles').defineOptionsStyle;\n\n_ = require('../core/localization')._;\n\nSANS_SERIF_FONTS = [['Arial', 'Arial,\"Helvetica Neue\",Helvetica,sans-serif'], ['Arial Black', '\"Arial Black\",\"Arial Bold\",Gadget,sans-serif'], ['Arial Narrow', '\"Arial Narrow\",Arial,sans-serif'], ['Gill Sans', '\"Gill Sans\",\"Gill Sans MT\",Calibri,sans-serif'], ['Helvetica', '\"Helvetica Neue\",Helvetica,Arial,sans-serif'], ['Impact', 'Impact,Haettenschweiler,\"Franklin Gothic Bold\",Charcoal,\"Helvetica Inserat\",\"Bitstream Vera Sans Bold\",\"Arial Black\",sans-serif'], ['Tahoma', 'Tahoma,Verdana,Segoe,sans-serif'], ['Trebuchet MS', '\"Trebuchet MS\",\"Lucida Grande\",\"Lucida Sans Unicode\",\"Lucida Sans\",Tahoma,sans-serif'], ['Verdana', 'Verdana,Geneva,sans-serif']].map(function(arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\n\nSERIF_FONTS = [['Baskerville', 'Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",Garamond,\"Times New Roman\",serif'], ['Garamond', 'Garamond,Baskerville,\"Baskerville Old Face\",\"Hoefler Text\",\"Times New Roman\",serif'], ['Georgia', 'Georgia,Times,\"Times New Roman\",serif'], ['Hoefler Text', '\"Hoefler Text\",\"Baskerville Old Face\",Garamond,\"Times New Roman\",serif'], ['Lucida Bright', '\"Lucida Bright\",Georgia,serif'], ['Palatino', 'Palatino,\"Palatino Linotype\",\"Palatino LT STD\",\"Book Antiqua\",Georgia,serif'], ['Times New Roman', 'TimesNewRoman,\"Times New Roman\",Times,Baskerville,Georgia,serif']].map(function(arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\n\nMONOSPACE_FONTS = [['Consolas/Monaco', 'Consolas,monaco,\"Lucida Console\",monospace'], ['Courier New', '\"Courier New\",Courier,\"Lucida Sans Typewriter\",\"Lucida Typewriter\",monospace'], ['Lucida Sans Typewriter', '\"Lucida Sans Typewriter\",\"Lucida Console\",monaco,\"Bitstream Vera Sans Mono\",monospace']].map(function(arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\n\nOTHER_FONTS = [['Copperplate', 'Copperplate,\"Copperplate Gothic Light\",fantasy'], ['Papyrus', 'Papyrus,fantasy'], ['Script', '\"Brush Script MT\",cursive']].map(function(arg) {\n  var name, value;\n  name = arg[0], value = arg[1];\n  return {\n    name: _(name),\n    value: value\n  };\n});\n\nALL_FONTS = [[_('Sans Serif'), SANS_SERIF_FONTS], [_('Serif'), SERIF_FONTS], [_('Monospace'), MONOSPACE_FONTS], [_('Other'), OTHER_FONTS]];\n\nFONT_NAME_TO_VALUE = {};\n\nfor (i = 0, len = SANS_SERIF_FONTS.length; i < len; i++) {\n  ref = SANS_SERIF_FONTS[i], name = ref.name, value = ref.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (j = 0, len1 = SERIF_FONTS.length; j < len1; j++) {\n  ref1 = SERIF_FONTS[j], name = ref1.name, value = ref1.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (l = 0, len2 = MONOSPACE_FONTS.length; l < len2; l++) {\n  ref2 = MONOSPACE_FONTS[l], name = ref2.name, value = ref2.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\nfor (m = 0, len3 = OTHER_FONTS.length; m < len3; m++) {\n  ref3 = OTHER_FONTS[m], name = ref3.name, value = ref3.value;\n  FONT_NAME_TO_VALUE[name] = value;\n}\n\ndefineOptionsStyle('font', React.createClass({\n  displayName: 'FontOptions',\n  getInitialState: function() {\n    return {\n      isItalic: false,\n      isBold: false,\n      fontName: 'Helvetica',\n      fontSizeIndex: 4\n    };\n  },\n  getFontSizes: function() {\n    return [9, 10, 12, 14, 18, 24, 36, 48, 64, 72, 96, 144, 288];\n  },\n  updateTool: function(newState) {\n    var fontSize, items, k;\n    if (newState == null) {\n      newState = {};\n    }\n    for (k in this.state) {\n      if (!(k in newState)) {\n        newState[k] = this.state[k];\n      }\n    }\n    fontSize = this.getFontSizes()[newState.fontSizeIndex];\n    items = [];\n    if (newState.isItalic) {\n      items.push('italic');\n    }\n    if (newState.isBold) {\n      items.push('bold');\n    }\n    items.push(fontSize + \"px\");\n    items.push(FONT_NAME_TO_VALUE[newState.fontName]);\n    this.props.lc.tool.font = items.join(' ');\n    return this.props.lc.trigger('setFont', items.join(' '));\n  },\n  handleFontSize: function(event) {\n    var newState;\n    newState = {\n      fontSizeIndex: event.target.value\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleFontFamily: function(event) {\n    var newState;\n    newState = {\n      fontName: event.target.selectedOptions[0].innerHTML\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleItalic: function(event) {\n    var newState;\n    newState = {\n      isItalic: !this.state.isItalic\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  handleBold: function(event) {\n    var newState;\n    newState = {\n      isBold: !this.state.isBold\n    };\n    this.setState(newState);\n    return this.updateTool(newState);\n  },\n  componentDidMount: function() {\n    return this.updateTool();\n  },\n  render: function() {\n    var br, div, input, label, lc, optgroup, option, ref4, select, span;\n    lc = this.props.lc;\n    ref4 = React.DOM, div = ref4.div, input = ref4.input, select = ref4.select, option = ref4.option, br = ref4.br, label = ref4.label, span = ref4.span, optgroup = ref4.optgroup;\n    return div({\n      className: 'lc-font-settings'\n    }, select({\n      value: this.state.fontSizeIndex,\n      onChange: this.handleFontSize\n    }, this.getFontSizes().map((function(_this) {\n      return function(size, ix) {\n        return option({\n          value: ix,\n          key: ix\n        }, size + \"px\");\n      };\n    })(this))), select({\n      value: this.state.fontName,\n      onChange: this.handleFontFamily\n    }, ALL_FONTS.map((function(_this) {\n      return function(arg) {\n        var fonts, label;\n        label = arg[0], fonts = arg[1];\n        return optgroup({\n          key: label,\n          label: label\n        }, fonts.map(function(family, ix) {\n          return option({\n            value: family.name,\n            key: ix\n          }, family.name);\n        }));\n      };\n    })(this))), span({}, label({\n      htmlFor: 'italic'\n    }, _(\"italic\")), input({\n      type: 'checkbox',\n      id: 'italic',\n      checked: this.state.isItalic,\n      onChange: this.handleItalic\n    })), span({}, label({\n      htmlFor: 'bold'\n    }, _(\"bold\")), input({\n      type: 'checkbox',\n      id: 'bold',\n      checked: this.state.isBold,\n      onChange: this.handleBold\n    })));\n  }\n}));\n\nmodule.exports = {};\n"]},"metadata":{},"sourceType":"script"}