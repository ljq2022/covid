{"ast":null,"code":"var INFINITE, JSONToShape, util;\nutil = require('./util');\nJSONToShape = require('./shapes').JSONToShape;\nINFINITE = 'infinite';\n\nmodule.exports = function (snapshot, opts) {\n  var allShapes, backgroundShapes, colors, ctx, dummyCanvas, imageSize, s, shapes;\n\n  if (opts == null) {\n    opts = {};\n  }\n\n  shapes = function () {\n    var i, len, ref, results;\n    ref = snapshot.shapes;\n    results = [];\n\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      results.push(JSONToShape(s));\n    }\n\n    return results;\n  }();\n\n  backgroundShapes = [];\n\n  if (snapshot.backgroundShapes) {\n    backgroundShapes = function () {\n      var i, len, ref, results;\n      ref = snapshot.backgroundShapes;\n      results = [];\n\n      for (i = 0, len = ref.length; i < len; i++) {\n        s = ref[i];\n        results.push(JSONToShape(s));\n      }\n\n      return results;\n    }();\n  }\n\n  if (opts.margin == null) {\n    opts.margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n\n  imageSize = snapshot.imageSize || {\n    width: INFINITE,\n    height: INFINITE\n  };\n  colors = snapshot.colors || {\n    background: 'transparent'\n  };\n  allShapes = shapes.concat(backgroundShapes);\n  dummyCanvas = document.createElement('canvas');\n  ctx = dummyCanvas.getContext('2d');\n\n  if (opts.rect) {\n    opts.rect.x -= opts.margin.left;\n    opts.rect.y -= opts.margin.top;\n    opts.rect.width += opts.margin.left + opts.margin.right;\n    opts.rect.height += opts.margin.top + opts.margin.bottom;\n  } else {\n    opts.rect = util.getDefaultImageRect(function () {\n      var i, len, results;\n      results = [];\n\n      for (i = 0, len = allShapes.length; i < len; i++) {\n        s = allShapes[i];\n        results.push(s.getBoundingRect(ctx));\n      }\n\n      return results;\n    }(), imageSize, opts.margin);\n  }\n\n  return LC.renderShapesToSVG(backgroundShapes.concat(shapes), opts.rect, colors.background);\n};","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/core/renderSnapshotToSVG.js"],"names":["INFINITE","JSONToShape","util","require","module","exports","snapshot","opts","allShapes","backgroundShapes","colors","ctx","dummyCanvas","imageSize","s","shapes","i","len","ref","results","length","push","margin","top","right","bottom","left","width","height","background","concat","document","createElement","getContext","rect","x","y","getDefaultImageRect","getBoundingRect","LC","renderShapesToSVG"],"mappings":"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","sourcesContent":["var INFINITE, JSONToShape, util;\n\nutil = require('./util');\n\nJSONToShape = require('./shapes').JSONToShape;\n\nINFINITE = 'infinite';\n\nmodule.exports = function(snapshot, opts) {\n  var allShapes, backgroundShapes, colors, ctx, dummyCanvas, imageSize, s, shapes;\n  if (opts == null) {\n    opts = {};\n  }\n  shapes = (function() {\n    var i, len, ref, results;\n    ref = snapshot.shapes;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      results.push(JSONToShape(s));\n    }\n    return results;\n  })();\n  backgroundShapes = [];\n  if (snapshot.backgroundShapes) {\n    backgroundShapes = (function() {\n      var i, len, ref, results;\n      ref = snapshot.backgroundShapes;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        s = ref[i];\n        results.push(JSONToShape(s));\n      }\n      return results;\n    })();\n  }\n  if (opts.margin == null) {\n    opts.margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n  imageSize = snapshot.imageSize || {\n    width: INFINITE,\n    height: INFINITE\n  };\n  colors = snapshot.colors || {\n    background: 'transparent'\n  };\n  allShapes = shapes.concat(backgroundShapes);\n  dummyCanvas = document.createElement('canvas');\n  ctx = dummyCanvas.getContext('2d');\n  if (opts.rect) {\n    opts.rect.x -= opts.margin.left;\n    opts.rect.y -= opts.margin.top;\n    opts.rect.width += opts.margin.left + opts.margin.right;\n    opts.rect.height += opts.margin.top + opts.margin.bottom;\n  } else {\n    opts.rect = util.getDefaultImageRect((function() {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = allShapes.length; i < len; i++) {\n        s = allShapes[i];\n        results.push(s.getBoundingRect(ctx));\n      }\n      return results;\n    })(), imageSize, opts.margin);\n  }\n  return LC.renderShapesToSVG(backgroundShapes.concat(shapes), opts.rect, colors.background);\n};\n"]},"metadata":{},"sourceType":"script"}