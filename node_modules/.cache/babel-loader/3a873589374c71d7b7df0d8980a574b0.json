{"ast":null,"code":"var React, classSet, createSetStateOnEventMixin;\nReact = require('./React-shim');\ncreateSetStateOnEventMixin = require('../reactGUI/createSetStateOnEventMixin');\nclassSet = require('../core/util').classSet;\nmodule.exports = React.createClass({\n  displayName: 'StrokeWidthPicker',\n  getState: function (tool) {\n    if (tool == null) {\n      tool = this.props.tool;\n    }\n\n    return {\n      strokeWidth: tool.strokeWidth\n    };\n  },\n  getInitialState: function () {\n    return this.getState();\n  },\n  mixins: [createSetStateOnEventMixin('toolDidUpdateOptions')],\n  componentWillReceiveProps: function (props) {\n    return this.setState(this.getState(props.tool));\n  },\n  render: function () {\n    var circle, div, li, ref, strokeWidths, svg, ul;\n    ref = React.DOM, ul = ref.ul, li = ref.li, svg = ref.svg, circle = ref.circle, div = ref.div;\n    strokeWidths = this.props.lc.opts.strokeWidths;\n    return div({}, strokeWidths.map(function (_this) {\n      return function (strokeWidth, ix) {\n        var buttonClassName, buttonSize;\n        buttonClassName = classSet({\n          'square-toolbar-button': true,\n          'selected': strokeWidth === _this.state.strokeWidth\n        });\n        buttonSize = 28;\n        return div({\n          key: strokeWidth\n        }, div({\n          className: buttonClassName,\n          onClick: function () {\n            return _this.props.lc.trigger('setStrokeWidth', strokeWidth);\n          }\n        }, svg({\n          width: buttonSize - 2,\n          height: buttonSize - 2,\n          viewPort: \"0 0 \" + strokeWidth + \" \" + strokeWidth,\n          version: \"1.1\",\n          xmlns: \"http://www.w3.org/2000/svg\"\n        }, circle({\n          cx: Math.ceil(buttonSize / 2 - 1),\n          cy: Math.ceil(buttonSize / 2 - 1),\n          r: strokeWidth / 2\n        }))));\n      };\n    }(this)));\n  }\n});","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/reactGUI/StrokeWidthPicker.js"],"names":["React","classSet","createSetStateOnEventMixin","require","module","exports","createClass","displayName","getState","tool","props","strokeWidth","getInitialState","mixins","componentWillReceiveProps","setState","render","circle","div","li","ref","strokeWidths","svg","ul","DOM","lc","opts","map","_this","ix","buttonClassName","buttonSize","state","key","className","onClick","trigger","width","height","viewPort","version","xmlns","cx","Math","ceil","cy","r"],"mappings":"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","sourcesContent":["var React, classSet, createSetStateOnEventMixin;\n\nReact = require('./React-shim');\n\ncreateSetStateOnEventMixin = require('../reactGUI/createSetStateOnEventMixin');\n\nclassSet = require('../core/util').classSet;\n\nmodule.exports = React.createClass({\n  displayName: 'StrokeWidthPicker',\n  getState: function(tool) {\n    if (tool == null) {\n      tool = this.props.tool;\n    }\n    return {\n      strokeWidth: tool.strokeWidth\n    };\n  },\n  getInitialState: function() {\n    return this.getState();\n  },\n  mixins: [createSetStateOnEventMixin('toolDidUpdateOptions')],\n  componentWillReceiveProps: function(props) {\n    return this.setState(this.getState(props.tool));\n  },\n  render: function() {\n    var circle, div, li, ref, strokeWidths, svg, ul;\n    ref = React.DOM, ul = ref.ul, li = ref.li, svg = ref.svg, circle = ref.circle, div = ref.div;\n    strokeWidths = this.props.lc.opts.strokeWidths;\n    return div({}, strokeWidths.map((function(_this) {\n      return function(strokeWidth, ix) {\n        var buttonClassName, buttonSize;\n        buttonClassName = classSet({\n          'square-toolbar-button': true,\n          'selected': strokeWidth === _this.state.strokeWidth\n        });\n        buttonSize = 28;\n        return div({\n          key: strokeWidth\n        }, div({\n          className: buttonClassName,\n          onClick: function() {\n            return _this.props.lc.trigger('setStrokeWidth', strokeWidth);\n          }\n        }, svg({\n          width: buttonSize - 2,\n          height: buttonSize - 2,\n          viewPort: \"0 0 \" + strokeWidth + \" \" + strokeWidth,\n          version: \"1.1\",\n          xmlns: \"http://www.w3.org/2000/svg\"\n        }, circle({\n          cx: Math.ceil(buttonSize / 2 - 1),\n          cy: Math.ceil(buttonSize / 2 - 1),\n          r: strokeWidth / 2\n        }))));\n      };\n    })(this)));\n  }\n});\n"]},"metadata":{},"sourceType":"script"}