{"ast":null,"code":"var React, StrokeWidthPicker, classSet, createSetStateOnEventMixin, defineOptionsStyle;\nReact = require('../reactGUI/React-shim');\ndefineOptionsStyle = require('./optionsStyles').defineOptionsStyle;\nStrokeWidthPicker = React.createFactory(require('../reactGUI/StrokeWidthPicker'));\ncreateSetStateOnEventMixin = require('../reactGUI/createSetStateOnEventMixin');\nclassSet = require('../core/util').classSet;\ndefineOptionsStyle('line-options-and-stroke-width', React.createClass({\n  displayName: 'LineOptionsAndStrokeWidth',\n  getState: function () {\n    return {\n      strokeWidth: this.props.tool.strokeWidth,\n      isDashed: this.props.tool.isDashed,\n      hasEndArrow: this.props.tool.hasEndArrow\n    };\n  },\n  getInitialState: function () {\n    return this.getState();\n  },\n  mixins: [createSetStateOnEventMixin('toolChange')],\n  render: function () {\n    var arrowButtonClass, dashButtonClass, div, img, li, ref, style, toggleIsDashed, togglehasEndArrow, ul;\n    ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, img = ref.img;\n\n    toggleIsDashed = function (_this) {\n      return function () {\n        _this.props.tool.isDashed = !_this.props.tool.isDashed;\n        return _this.setState(_this.getState());\n      };\n    }(this);\n\n    togglehasEndArrow = function (_this) {\n      return function () {\n        _this.props.tool.hasEndArrow = !_this.props.tool.hasEndArrow;\n        return _this.setState(_this.getState());\n      };\n    }(this);\n\n    dashButtonClass = classSet({\n      'square-toolbar-button': true,\n      'selected': this.state.isDashed\n    });\n    arrowButtonClass = classSet({\n      'square-toolbar-button': true,\n      'selected': this.state.hasEndArrow\n    });\n    style = {\n      float: 'left',\n      margin: 1\n    };\n    return div({}, div({\n      className: dashButtonClass,\n      onClick: toggleIsDashed,\n      style: style\n    }, img({\n      src: this.props.imageURLPrefix + \"/dashed-line.png\"\n    })), div({\n      className: arrowButtonClass,\n      onClick: togglehasEndArrow,\n      style: style\n    }, img({\n      src: this.props.imageURLPrefix + \"/line-with-arrow.png\"\n    })), StrokeWidthPicker({\n      tool: this.props.tool,\n      lc: this.props.lc\n    }));\n  }\n}));\nmodule.exports = {};","map":{"version":3,"sources":["C:/Users/lukeq/blog/node_modules/literallycanvas/lib/js/optionsStyles/line-options-and-stroke-width.js"],"names":["React","StrokeWidthPicker","classSet","createSetStateOnEventMixin","defineOptionsStyle","require","createFactory","createClass","displayName","getState","strokeWidth","props","tool","isDashed","hasEndArrow","getInitialState","mixins","render","arrowButtonClass","dashButtonClass","div","img","li","ref","style","toggleIsDashed","togglehasEndArrow","ul","DOM","_this","setState","state","float","margin","className","onClick","src","imageURLPrefix","lc","module","exports"],"mappings":"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","sourcesContent":["var React, StrokeWidthPicker, classSet, createSetStateOnEventMixin, defineOptionsStyle;\n\nReact = require('../reactGUI/React-shim');\n\ndefineOptionsStyle = require('./optionsStyles').defineOptionsStyle;\n\nStrokeWidthPicker = React.createFactory(require('../reactGUI/StrokeWidthPicker'));\n\ncreateSetStateOnEventMixin = require('../reactGUI/createSetStateOnEventMixin');\n\nclassSet = require('../core/util').classSet;\n\ndefineOptionsStyle('line-options-and-stroke-width', React.createClass({\n  displayName: 'LineOptionsAndStrokeWidth',\n  getState: function() {\n    return {\n      strokeWidth: this.props.tool.strokeWidth,\n      isDashed: this.props.tool.isDashed,\n      hasEndArrow: this.props.tool.hasEndArrow\n    };\n  },\n  getInitialState: function() {\n    return this.getState();\n  },\n  mixins: [createSetStateOnEventMixin('toolChange')],\n  render: function() {\n    var arrowButtonClass, dashButtonClass, div, img, li, ref, style, toggleIsDashed, togglehasEndArrow, ul;\n    ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, img = ref.img;\n    toggleIsDashed = (function(_this) {\n      return function() {\n        _this.props.tool.isDashed = !_this.props.tool.isDashed;\n        return _this.setState(_this.getState());\n      };\n    })(this);\n    togglehasEndArrow = (function(_this) {\n      return function() {\n        _this.props.tool.hasEndArrow = !_this.props.tool.hasEndArrow;\n        return _this.setState(_this.getState());\n      };\n    })(this);\n    dashButtonClass = classSet({\n      'square-toolbar-button': true,\n      'selected': this.state.isDashed\n    });\n    arrowButtonClass = classSet({\n      'square-toolbar-button': true,\n      'selected': this.state.hasEndArrow\n    });\n    style = {\n      float: 'left',\n      margin: 1\n    };\n    return div({}, div({\n      className: dashButtonClass,\n      onClick: toggleIsDashed,\n      style: style\n    }, img({\n      src: this.props.imageURLPrefix + \"/dashed-line.png\"\n    })), div({\n      className: arrowButtonClass,\n      onClick: togglehasEndArrow,\n      style: style\n    }, img({\n      src: this.props.imageURLPrefix + \"/line-with-arrow.png\"\n    })), StrokeWidthPicker({\n      tool: this.props.tool,\n      lc: this.props.lc\n    }));\n  }\n}));\n\nmodule.exports = {};\n"]},"metadata":{},"sourceType":"script"}